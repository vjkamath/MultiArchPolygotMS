version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-cli: circleci/aws-cli@4.1

jobs:
  build-and-test:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context

      # Build nodejs service
      - run:
          name: Build Node.js service
          command: |
            cd nodejs-service
            docker buildx build --platform linux/arm64 --progress=plain -t nodejs-service:${CIRCLE_SHA1} .

      # Build python service
      - run:
          name: Build Python service
          command: |
            cd python-service
            docker buildx build --platform linux/amd64 -t python-service:${CIRCLE_SHA1} .

  deploy:
    docker:
      - image: cimg/python:3.9-node
    environment:
      AWS_PAGER: ""
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Install AWS CLI with specific version
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            
      # Configure AWS credentials directly with enhanced debugging
      - run:
          name: Configure AWS credentials with debugging
          command: |
            # Debug environment variables
            echo "AWS_REGION environment variable: '${AWS_REGION}'"
            echo "AWS_ACCOUNT_ID environment variable: '${AWS_ACCOUNT_ID}'"
            echo "AWWS_ACCOUNT_ID environment variable: '${AWWS_ACCOUNT_ID}'"
            echo "AWS_ECR_REPO_NAME environment variable: '${AWS_ECR_REPO_NAME}'"
            echo "AWS_ACCESS_KEY_ID length: $(if [ -n "${AWS_ACCESS_KEY_ID}" ]; then echo ${#AWS_ACCESS_KEY_ID}; else echo "0"; fi)"
            echo "AWS_SECRET_ACCESS_KEY length: $(if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then echo ${#AWS_SECRET_ACCESS_KEY}; else echo "0"; fi)"
            
            # Check if AWS_ACCESS_KEY_ID starts with the typical pattern
            if [ -n "${AWS_ACCESS_KEY_ID}" ]; then
              echo "AWS_ACCESS_KEY_ID starts with: ${AWS_ACCESS_KEY_ID:0:4}..."
              if [[ ! "${AWS_ACCESS_KEY_ID}" =~ ^AKIA || ! "${AWS_ACCESS_KEY_ID}" =~ ^ASIA ]]; then
                echo "WARNING: AWS_ACCESS_KEY_ID does not start with typical AWS key prefix (AKIA or ASIA)"
              fi
            fi
            
            # Fix typo in AWS_ACCOUNT_ID if needed
            if [ -n "${AWWS_ACCOUNT_ID}" ] && [ -z "${AWS_ACCOUNT_ID}" ]; then
              echo "Found AWWS_ACCOUNT_ID instead of AWS_ACCOUNT_ID, using it instead"
              export AWS_ACCOUNT_ID="${AWWS_ACCOUNT_ID}"
            fi
            
            # Create AWS config directory
            mkdir -p ~/.aws
            
            # Create credentials file with direct credentials
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            
            # Create config file
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
            
            # Debug AWS config files (without showing secrets)
            echo "Contents of ~/.aws/config:"
            cat ~/.aws/config
            echo "First line of ~/.aws/credentials (secrets hidden):"
            head -n 1 ~/.aws/credentials
            
            # Explicitly set AWS environment variables
            export AWS_REGION="${AWS_REGION}"
            export AWS_DEFAULT_REGION="${AWS_REGION}"
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            
            echo "Re-exported AWS_REGION: '${AWS_REGION}'"
            echo "Using AWS_ACCOUNT_ID: '${AWS_ACCOUNT_ID}'"
            
            # Test the credentials with verbose error output
            echo "Testing AWS credentials with STS..."
            aws sts get-caller-identity || echo "STS call failed with exit code $?"
          
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context

      # Debug AWS configuration
      - run:
          name: Debug AWS Configuration
          command: |
            echo "AWS Region: '${AWS_REGION}'"
            echo "AWS Account ID: '${AWS_ACCOUNT_ID}'"
            echo "AWWS Account ID: '${AWWS_ACCOUNT_ID}'"
            echo "ECR Repository: '${AWS_ECR_REPO_NAME}'"
            echo "AWS CLI version:"
            aws --version
            echo "AWS CLI configuration:"
            aws configure list
            
            # Check environment variables
            echo "Environment variables:"
            env | grep -i aws

      # Login to AWS ECR
      - run:
          name: Login to AWS ECR
          command: |
            echo "Logging into ECR in region '${AWS_REGION}' with account '${AWS_ACCOUNT_ID}'"
            # Ensure environment variables are exported again
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_REGION="${AWS_REGION}"
            export AWS_DEFAULT_REGION="${AWS_REGION}"
            
            # Non-interactive login using docker credentials helper
            mkdir -p ~/.docker
            echo '{"credsStore":"ecr-login"}' > ~/.docker/config.json
            
            # Alternative approach using get-login with no-include-email
            echo "Trying alternative ECR login approach"
            LOGIN_COMMAND=$(aws ecr get-login --no-include-email --region ${AWS_REGION})
            echo "Executing login command (password hidden)"
            $LOGIN_COMMAND

      # Build and push nodejs-service
      - run:
          name: Build and push nodejs-service
          command: |
            cd nodejs-service
            docker buildx build --platform linux/arm64 --progress=plain --push -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:nodejs-service-${CIRCLE_SHA1} .

      # Build and push python-service
      - run:
          name: Build and push python-service
          command: |
            cd python-service
            docker buildx build --platform linux/amd64 --push -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:python-service-${CIRCLE_SHA1} .
            
      # Install jq for JSON processing
      - run:
          name: Install jq
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
            
      # Deploy to ECS
      - run:
          name: Update ECS services
          command: |
            # Update Node.js service task definition
            NODEJS_TASK_DEF=$(aws ecs describe-task-definition --task-definition nodejs-service --query 'taskDefinition' --output json)
            NEW_NODEJS_TASK_DEF=$(echo $NODEJS_TASK_DEF | jq --arg IMAGE "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:nodejs-service-${CIRCLE_SHA1}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_NODEJS_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_NODEJS_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service nodejs-service --task-definition $NEW_NODEJS_TASK_DEF_ARN --force-new-deployment
            
            # Update Python service task definition
            PYTHON_TASK_DEF=$(aws ecs describe-task-definition --task-definition python-service --query 'taskDefinition' --output json)
            NEW_PYTHON_TASK_DEF=$(echo $PYTHON_TASK_DEF | jq --arg IMAGE "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:python-service-${CIRCLE_SHA1}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_PYTHON_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_PYTHON_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service python-service --task-definition $NEW_PYTHON_TASK_DEF_ARN --force-new-deployment

workflows:
  build-test-deploy:
    jobs:
      - build-and-test:
          context: MultiArch
      - deploy:
          context: MultiArch
          requires:
            - build-and-test
          filters:
            branches:
              only: main
