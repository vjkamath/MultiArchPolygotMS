version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  aws-ecr: circleci/aws-ecr@8.2

jobs:
  build-and-test:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context

      # Build nodejs service
      - run:
          name: Build Node.js service
          command: |
            cd nodejs-service
            docker buildx build --platform linux/arm64 --progress=plain -t nodejs-service:${CIRCLE_SHA1} .

      # Build python service
      - run:
          name: Build Python service
          command: |
            cd python-service
            docker buildx build --platform linux/amd64 -t python-service:${CIRCLE_SHA1} .

  deploy:
    docker:
      - image: cimg/python:3.9-node
    environment:
      AWS_PAGER: ""
      AWS_SDK_LOAD_CONFIG: "true"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Install jq for JSON processing
      - run:
          name: Install jq and other dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
      
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context
      
      # Set up AWS credentials using OIDC with existing role
      - aws-cli/setup:
          role-arn: "arn:aws:iam::216693060274:role/multiarch-polygot"
          aws-region: AWS_REGION
          profile-name: "oidc-profile"
      
      # Debugs AWS configuration
      - run:
          name: Debug AWS Configuration
          command: |
            echo "AWS Region: '${AWS_REGION}'"
            echo "AWS Account ID: '${AWS_ACCOUNT_ID}'"
            echo "AWS Role: '${AWS_ROLE}'"
            echo "Node.js ECR Repository: '${NODEJS_ECR_REPO_NAME}'"
            echo "Python ECR Repository: '${PYTHON_ECR_REPO_NAME}'"
            echo "AWS CLI version:"
            aws --version
            echo "AWS CLI configuration:"
            aws configure list
            
            # Verify AWS identity
            echo "Verifying AWS identity (should show assumed role):"
            aws sts get-caller-identity --profile oidc-profile

      # Login to AWS ECR
      - run:
          name: Login to AWS ECR
          command: |
            echo "Logging into ECR in region '${AWS_REGION}' with account '${AWS_ACCOUNT_ID}'"
            aws ecr get-login-password --region ${AWS_REGION} --profile oidc-profile | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
            
            # List ECR repositories to verify access
            echo "Listing ECR repositories to verify access:"
            aws ecr describe-repositories --region ${AWS_REGION} --profile oidc-profile --max-items 5 || echo "Failed to list ECR repositories"

      # Build and push nodejs-service
      - run:
          name: Build and push nodejs-service
          command: |
            cd nodejs-service
            echo "Building and pushing Node.js service from directory: $(pwd)"
            ls -la
            
            # Define the full image tag
            NODEJS_IMAGE_TAG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${NODEJS_ECR_REPO_NAME}:${CIRCLE_SHA1}"
            echo "Building image: $NODEJS_IMAGE_TAG"
            
            # Build and push using separate commands to avoid issues
            docker buildx build \
              --platform linux/arm64 \
              --progress=plain \
              -t $NODEJS_IMAGE_TAG \
              --push \
              .

      # Build and push python-service
      - run:
          name: Build and push python-service
          command: |
            cd python-service
            echo "Building and pushing Python service from directory: $(pwd)"
            ls -la
            
            # Define the full image tag
            PYTHON_IMAGE_TAG="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PYTHON_ECR_REPO_NAME}:${CIRCLE_SHA1}"
            echo "Building image: $PYTHON_IMAGE_TAG"
            
            # Build and push using separate commands to avoid issues
            docker buildx build \
              --platform linux/amd64 \
              --progress=plain \
              -t $PYTHON_IMAGE_TAG \
              --push \
              .
            
      # Deploy to ECS
      - run:
          name: Update ECS services
          command: |
            # Update Node.js service task definition
            NODEJS_TASK_DEF=$(aws ecs describe-task-definition --task-definition nodejs-service --profile oidc-profile --query 'taskDefinition' --output json)
            NEW_NODEJS_TASK_DEF=$(echo $NODEJS_TASK_DEF | jq --arg IMAGE "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${NODEJS_ECR_REPO_NAME}:${CIRCLE_SHA1}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_NODEJS_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_NODEJS_TASK_DEF" --profile oidc-profile --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service nodejs-service --task-definition $NEW_NODEJS_TASK_DEF_ARN --profile oidc-profile --force-new-deployment
            
            # Update Python service task definition
            PYTHON_TASK_DEF=$(aws ecs describe-task-definition --task-definition python-service --profile oidc-profile --query 'taskDefinition' --output json)
            NEW_PYTHON_TASK_DEF=$(echo $PYTHON_TASK_DEF | jq --arg IMAGE "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PYTHON_ECR_REPO_NAME}:${CIRCLE_SHA1}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_PYTHON_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_PYTHON_TASK_DEF" --profile oidc-profile --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service python-service --task-definition $NEW_PYTHON_TASK_DEF_ARN --profile oidc-profile --force-new-deployment

workflows:
  build-test-deploy:
    jobs:
      - build-and-test:
          context: MultiArch
      - deploy:
          context: MultiArch
          requires:
            - build-and-test
          filters:
            branches:
              only: main
