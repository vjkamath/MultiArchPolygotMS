version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-cli: circleci/aws-cli@4.1
  aws-oidc: circleci/aws-oidc@2.0.3

jobs:
  build-and-test:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context

      # Build nodejs service
      - run:
          name: Build Node.js service
          command: |
            cd nodejs-service
            docker buildx build --platform linux/arm64 --progress=plain -t nodejs-service:${CIRCLE_SHA1} .

      # Build python service
      - run:
          name: Build Python service
          command: |
            cd python-service
            docker buildx build --platform linux/amd64 -t python-service:${CIRCLE_SHA1} .

  deploy:
    docker:
      - image: cimg/python:3.9-node
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Configure AWS credentials using OIDC
      - aws-oidc/setup-client:
          role-arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/multiarch-polygot
          aws-region: ${AWS_REGION}
          
      # Install AWS CLI
      - run:
          name: Install AWS CLI
          command: |
            pip install awscli
            aws --version
          
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context

      # Debug AWS configuration
      - run:
          name: Debug AWS Configuration
          command: |
            echo "AWS Region: ${AWS_REGION}"
            echo "AWS Account ID: ${AWS_ACCOUNT_ID}"
            echo "ECR Repository: ${AWS_ECR_REPO_NAME}"
            aws sts get-caller-identity
            aws configure list

      # Login to AWS ECR
      - run:
          name: Login to AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com

      # Build and push nodejs-service
      - run:
          name: Build and push nodejs-service
          command: |
            cd nodejs-service
            docker buildx build --platform linux/arm64 --progress=plain --push -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:nodejs-service-${CIRCLE_SHA1} .

      # Build and push python-service
      - run:
          name: Build and push python-service
          command: |
            cd python-service
            docker buildx build --platform linux/amd64 --push -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:python-service-${CIRCLE_SHA1} .
            
      # Deploy to ECS
      - run:
          name: Update ECS services
          command: |
            # Update Node.js service task definition
            NODEJS_TASK_DEF=$(aws ecs describe-task-definition --task-definition nodejs-service --query 'taskDefinition' --output json)
            NEW_NODEJS_TASK_DEF=$(echo $NODEJS_TASK_DEF | jq '.containerDefinitions[0].image = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:nodejs-service-${CIRCLE_SHA1}"' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_NODEJS_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_NODEJS_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service nodejs-service --task-definition $NEW_NODEJS_TASK_DEF_ARN --force-new-deployment
            
            # Update Python service task definition
            PYTHON_TASK_DEF=$(aws ecs describe-task-definition --task-definition python-service --query 'taskDefinition' --output json)
            NEW_PYTHON_TASK_DEF=$(echo $PYTHON_TASK_DEF | jq '.containerDefinitions[0].image = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:python-service-${CIRCLE_SHA1}"' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_PYTHON_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_PYTHON_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service python-service --task-definition $NEW_PYTHON_TASK_DEF_ARN --force-new-deployment

workflows:
  build-test-deploy:
    jobs:
      - build-and-test:
          context: AWS_REGION
      - deploy:
          context: AWS_REGION
          requires:
            - build-and-test
          filters:
            branches:
              only: main
