version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.15.3
  aws-cli: circleci/aws-cli@4.1

jobs:
  build-and-test:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context

      # Build nodejs service
      - run:
          name: Build Node.js service
          command: |
            cd nodejs-service
            docker buildx build --platform linux/arm64 --progress=plain -t nodejs-service:${CIRCLE_SHA1} .

      # Build python service
      - run:
          name: Build Python service
          command: |
            cd python-service
            docker buildx build --platform linux/amd64 -t python-service:${CIRCLE_SHA1} .

  deploy:
    docker:
      - image: cimg/python:3.9-node
    environment:
      AWS_PAGER: ""
      AWS_SDK_LOAD_CONFIG: "true"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          
      # Install AWS CLI with specific version
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version
            
      # Configure AWS credentials with detailed debugging
      - run:
          name: Configure AWS credentials with detailed debugging
          command: |
            # Debug environment variables
            echo "AWS_REGION environment variable: '${AWS_REGION}'"
            echo "AWS_ACCOUNT_ID environment variable: '${AWS_ACCOUNT_ID}'"
            echo "AWWS_ACCOUNT_ID environment variable: '${AWWS_ACCOUNT_ID}'"
            echo "AWS_ROLE environment variable: '${AWS_ROLE}'"
            echo "AWS_ACCESS_KEY_ID exists: $(if [ -n "${AWS_ACCESS_KEY_ID}" ]; then echo "YES"; else echo "NO"; fi)"
            echo "AWS_SECRET_ACCESS_KEY exists: $(if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then echo "YES"; else echo "NO"; fi)"
            
            # Fix typo in AWS_ACCOUNT_ID if needed
            if [ -n "${AWWS_ACCOUNT_ID}" ] && [ -z "${AWS_ACCOUNT_ID}" ]; then
              echo "Found AWWS_ACCOUNT_ID instead of AWS_ACCOUNT_ID, using it instead"
              export AWS_ACCOUNT_ID="${AWWS_ACCOUNT_ID}"
            fi
            
            # Create AWS config directory
            mkdir -p ~/.aws
            
            # Create credentials file with direct credentials
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
            
            # Create config file
            echo "[default]" > ~/.aws/config
            echo "region = ${AWS_REGION}" >> ~/.aws/config
            echo "output = json" >> ~/.aws/config
            
            # Test base credentials first
            echo "Testing base AWS credentials..."
            if aws sts get-caller-identity; then
              echo "✅ Base AWS credentials are valid"
              
              # Only try to assume role if base credentials work and AWS_ROLE is provided
              if [ -n "${AWS_ROLE}" ]; then
                echo "Attempting to assume role: ${AWS_ROLE}"
                
                # Try to assume the role and capture both output and exit code
                TEMP_CREDS=$(aws sts assume-role --role-arn "${AWS_ROLE}" --role-session-name "CircleCI-${CIRCLE_BUILD_NUM}" --query "Credentials" --output json)
                ASSUME_ROLE_EXIT_CODE=$?
                
                if [ $ASSUME_ROLE_EXIT_CODE -eq 0 ]; then
                  echo "✅ Successfully assumed role"
                  
                  # Extract credentials from the response
                  export AWS_ACCESS_KEY_ID=$(echo $TEMP_CREDS | jq -r '.AccessKeyId')
                  export AWS_SECRET_ACCESS_KEY=$(echo $TEMP_CREDS | jq -r '.SecretAccessKey')
                  export AWS_SESSION_TOKEN=$(echo $TEMP_CREDS | jq -r '.SessionToken')
                  
                  # Update credentials file with temporary credentials
                  echo "[default]" > ~/.aws/credentials
                  echo "aws_access_key_id = ${AWS_ACCESS_KEY_ID}" >> ~/.aws/credentials
                  echo "aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}" >> ~/.aws/credentials
                  echo "aws_session_token = ${AWS_SESSION_TOKEN}" >> ~/.aws/credentials
                  
                  echo "Using assumed role credentials"
                else
                  echo "❌ Failed to assume role. Exit code: $ASSUME_ROLE_EXIT_CODE"
                  echo "Continuing with base credentials instead"
                fi
              else
                echo "No AWS_ROLE specified, continuing with base credentials"
              fi
            else
              echo "❌ Base AWS credentials are invalid. Please check your AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY"
              exit 1
            fi
            
            # Final credential verification
            echo "Final credential verification:"
            aws sts get-caller-identity
          
      # Set up Docker Buildx
      - run:
          name: Set up Docker Buildx
          command: |
            docker context create buildx-context
            docker buildx create --use buildx-context

      # Debug AWS configuration
      - run:
          name: Debug AWS Configuration
          command: |
            echo "AWS Region: '${AWS_REGION}'"
            echo "AWS Account ID: '${AWS_ACCOUNT_ID}'"
            echo "AWS Role: '${AWS_ROLE}'"
            echo "ECR Repository: '${AWS_ECR_REPO_NAME}'"
            echo "AWS CLI version:"
            aws --version
            echo "AWS CLI configuration:"
            aws configure list
            
            # Check if we can access AWS resources
            echo "Testing AWS access:"
            aws sts get-caller-identity || echo "Failed to get caller identity"
            
            # Check if we can list S3 buckets (basic permission test)
            echo "Testing S3 access (basic permission test):"
            aws s3 ls || echo "Failed to list S3 buckets"

      # Login to AWS ECR with fallback options
      - run:
          name: Login to AWS ECR
          command: |
            echo "Logging into ECR in region '${AWS_REGION}' with account '${AWS_ACCOUNT_ID}'"
            
            # Get ECR login token and login to Docker
            echo "Using get-login-password for ECR authentication"
            if aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com; then
              echo "✅ Successfully logged into ECR"
            else
              echo "❌ Failed to log into ECR using get-login-password"
              echo "Trying alternative login method..."
              
              # Try alternative login method
              LOGIN_CMD=$(aws ecr get-login --no-include-email --region ${AWS_REGION})
              if [ -n "$LOGIN_CMD" ]; then
                echo "Executing ECR login command"
                eval $LOGIN_CMD
              else
                echo "❌ Failed to get ECR login command"
                exit 1
              fi
            fi
            
            # List ECR repositories to verify access
            echo "Listing ECR repositories to verify access:"
            aws ecr describe-repositories --region ${AWS_REGION} --max-items 5 || echo "Failed to list ECR repositories"

      # Build and push nodejs-service
      - run:
          name: Build and push nodejs-service
          command: |
            cd nodejs-service
            docker buildx build --platform linux/arm64 --progress=plain --push -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:nodejs-service-${CIRCLE_SHA1} .

      # Build and push python-service
      - run:
          name: Build and push python-service
          command: |
            cd python-service
            docker buildx build --platform linux/amd64 --push -t ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:python-service-${CIRCLE_SHA1} .
            
      # Install jq for JSON processing
      - run:
          name: Install jq
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
            
      # Deploy to ECS
      - run:
          name: Update ECS services
          command: |
            # Update Node.js service task definition
            NODEJS_TASK_DEF=$(aws ecs describe-task-definition --task-definition nodejs-service --query 'taskDefinition' --output json)
            NEW_NODEJS_TASK_DEF=$(echo $NODEJS_TASK_DEF | jq --arg IMAGE "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:nodejs-service-${CIRCLE_SHA1}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_NODEJS_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_NODEJS_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service nodejs-service --task-definition $NEW_NODEJS_TASK_DEF_ARN --force-new-deployment
            
            # Update Python service task definition
            PYTHON_TASK_DEF=$(aws ecs describe-task-definition --task-definition python-service --query 'taskDefinition' --output json)
            NEW_PYTHON_TASK_DEF=$(echo $PYTHON_TASK_DEF | jq --arg IMAGE "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_ECR_REPO_NAME}:python-service-${CIRCLE_SHA1}" '.containerDefinitions[0].image = $IMAGE' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            NEW_PYTHON_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_PYTHON_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
            aws ecs update-service --cluster polyglot-cluster --service python-service --task-definition $NEW_PYTHON_TASK_DEF_ARN --force-new-deployment

workflows:
  build-test-deploy:
    jobs:
      - build-and-test:
          context: MultiArch
      - deploy:
          context: MultiArch
          requires:
            - build-and-test
          filters:
            branches:
              only: main
